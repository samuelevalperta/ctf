#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=supermegaiperencryption.challs.olicyber.it' '--port=10803'
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './path/to/binary'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'supermegaiperencryption.challs.olicyber.it'
port = int(args.PORT or 10803)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

# Get the encrypted flag and remove '\n'
io.recvuntil(b'Ecco il risultato della nostra supercriptazione:\n')
encrypted_flag = io.recvline().split(b'\n')[0].decode()

# lvv1
# dalla a alla c viene sottratto 0x14
# dalla d in poi viene aggiungo 0x64

# lv2
# write num_cifre + ord(char) 

# lv3
# reversev

stage3 = encrypted_flag[::-1]

i = 0
stage2 = []

while i < len(stage3):
    num_cifre = int(stage3[i])
    stage2.append(stage3[i+1:i+num_cifre+1])
    i = i + num_cifre + 1

stage2 = list(map(int, stage2))    
stage1 = []

for i,value in enumerate(stage2):
    if value < 0x64 - 0x14:
        stage1.append(stage2[i] + 0x14)
    else:
        stage1.append(stage2[i] -0x64) 

flag = "".join([chr(value) for value in stage1])    

print(flag)



