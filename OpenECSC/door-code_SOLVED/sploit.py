from pwn import *


def unprint_mac_piece(val: str):
    mapped = {
        0: ":",
        1: "8:",
        2: "2:",
        3: "e:",
        4: "5:",
        5: "b:",
        6: "E:",
        7: "C:",
        8: "7:",
        9: "1:",
        10: "8f:",
        11: "88:",
        12: "82:",
        13: "8e:",
        14: "85:",
        15: "8b:",
        16: "8E:",
        17: "8C:",
        18: "87:",
        19: "81:",
        20: "2f:",
        21: "28:",
        22: "22:",
        23: "2e:",
        24: "25:",
        25: "2b:",
        26: "2E:",
        27: "2C:",
        28: "27:",
        29: "21:",
        30: "ef:",
        31: "e8:",
        32: "e2:",
        33: "ee:",
        34: "e5:",
        35: "eb:",
        36: "eE:",
        37: "eC:",
        38: "e7:",
        39: "e1:",
        40: "5f:",
        41: "58:",
        42: "52:",
        43: "5e:",
        44: "55:",
        45: "5b:",
        46: "5E:",
        47: "5C:",
        48: "57:",
        49: "51:",
        50: "bf:",
        51: "b8:",
        52: "b2:",
        53: "be:",
        54: "b5:",
        55: "bb:",
        56: "bE:",
        57: "bC:",
        58: "b7:",
        59: "b1:",
        60: "Ef:",
        61: "E8:",
        62: "E2:",
        63: "Ee:",
        64: "E5:",
        65: "Eb:",
        66: "EE:",
        67: "EC:",
        68: "E7:",
        69: "E1:",
        70: "Cf:",
        71: "C8:",
        72: "C2:",
        73: "Ce:",
        74: "C5:",
        75: "Cb:",
        76: "CE:",
        77: "CC:",
        78: "C7:",
        79: "C1:",
        80: "7f:",
        81: "78:",
        82: "72:",
        83: "7e:",
        84: "75:",
        85: "7b:",
        86: "7E:",
        87: "7C:",
        88: "77:",
        89: "71:",
        90: "1f:",
        91: "18:",
        92: "12:",
        93: "1e:",
        94: "15:",
        95: "1b:",
        96: "1E:",
        97: "1C:",
        98: "17:",
        99: "11:",
        100: "8ff:",
        101: "8f8:",
        102: "8f2:",
        103: "8fe:",
        104: "8f5:",
        105: "8fb:",
        106: "8fE:",
        107: "8fC:",
        108: "8f7:",
        109: "8f1:",
        110: "88f:",
        111: "888:",
        112: "882:",
        113: "88e:",
        114: "885:",
        115: "88b:",
        116: "88E:",
        117: "88C:",
        118: "887:",
        119: "881:",
        120: "82f:",
        121: "828:",
        122: "822:",
        123: "82e:",
        124: "825:",
        125: "82b:",
        126: "82E:",
        127: "82C:",
        128: "827:",
        129: "821:",
        130: "8ef:",
        131: "8e8:",
        132: "8e2:",
        133: "8ee:",
        134: "8e5:",
        135: "8eb:",
        136: "8eE:",
        137: "8eC:",
        138: "8e7:",
        139: "8e1:",
        140: "85f:",
        141: "858:",
        142: "852:",
        143: "85e:",
        144: "855:",
        145: "85b:",
        146: "85E:",
        147: "85C:",
        148: "857:",
        149: "851:",
        150: "8bf:",
        151: "8b8:",
        152: "8b2:",
        153: "8be:",
        154: "8b5:",
        155: "8bb:",
        156: "8bE:",
        157: "8bC:",
        158: "8b7:",
        159: "8b1:",
        160: "8Ef:",
        161: "8E8:",
        162: "8E2:",
        163: "8Ee:",
        164: "8E5:",
        165: "8Eb:",
        166: "8EE:",
        167: "8EC:",
        168: "8E7:",
        169: "8E1:",
        170: "8Cf:",
        171: "8C8:",
        172: "8C2:",
        173: "8Ce:",
        174: "8C5:",
        175: "8Cb:",
        176: "8CE:",
        177: "8CC:",
        178: "8C7:",
        179: "8C1:",
        180: "87f:",
        181: "878:",
        182: "872:",
        183: "87e:",
        184: "875:",
        185: "87b:",
        186: "87E:",
        187: "87C:",
        188: "877:",
        189: "871:",
        190: "81f:",
        191: "818:",
        192: "812:",
        193: "81e:",
        194: "815:",
        195: "81b:",
        196: "81E:",
        197: "81C:",
        198: "817:",
        199: "811:",
        200: "2ff:",
        201: "2f8:",
        202: "2f2:",
        203: "2fe:",
        204: "2f5:",
        205: "2fb:",
        206: "2fE:",
        207: "2fC:",
        208: "2f7:",
        209: "2f1:",
        210: "28f:",
        211: "288:",
        212: "282:",
        213: "28e:",
        214: "285:",
        215: "28b:",
        216: "28E:",
        217: "28C:",
        218: "287:",
        219: "281:",
        220: "22f:",
        221: "228:",
        222: "222:",
        223: "22e:",
        224: "225:",
        225: "22b:",
        226: "22E:",
        227: "22C:",
        228: "227:",
        229: "221:",
        230: "2ef:",
        231: "2e8:",
        232: "2e2:",
        233: "2ee:",
        234: "2e5:",
        235: "2eb:",
        236: "2eE:",
        237: "2eC:",
        238: "2e7:",
        239: "2e1:",
        240: "25f:",
        241: "258:",
        242: "252:",
        243: "25e:",
        244: "255:",
        245: "25b:",
        246: "25E:",
        247: "25C:",
        248: "257:",
        249: "251:",
        250: "2bf:",
        251: "2b8:",
        252: "2b2:",
        253: "2be:",
        254: "2b5:",
        255: "2bb:",
    }

    assert val.endswith(':')

    matched = None
    for item in mapped.items():
        if val == item[1]:
            assert matched is None
            matched = item[0]

    assert matched is not None, val
    return matched


MANGLE_SEQUENCE = [252, 59, 126, 32, 28, 158, 168, 199]


def main():
    r = remote('challenges.open.ecsc.no', 1556)
    r.recvuntil(b'#')

    mangled_mac = [0] * 8
    for i in range(8):
        piece = r.recvuntil(b':').decode()
        mangled_mac[i] = unprint_mac_piece(piece)

    print(f'{mangled_mac = }')

    actual_mac = [0] * 8
    for i in range(8):
        actual_mac[i] =  mangled_mac[i]^ MANGLE_SEQUENCE[i]

    print(f'{actual_mac = }')
    mac_num = int.from_bytes(bytes(actual_mac), 'little')
    print(f'{mac_num = }')

    desired_num = int.from_bytes(b'\x06\x05\x05\x03\x05\x00\x00\x00', 'little')

    needed_num = mac_num ^ desired_num
    print(f'{needed_num = }')
    needed_hex = hex(needed_num)[2:]

    r.sendline(needed_hex.encode())
    r.interactive()


def test():
    mangled_mac = [
        unprint_mac_piece('E1:'),
        unprint_mac_piece('8:'),
        unprint_mac_piece('871:'),
        unprint_mac_piece('7b:'),
        unprint_mac_piece('Eb:'),
        unprint_mac_piece('C2:'),
        unprint_mac_piece('25C:'),
        unprint_mac_piece('ee:'),
    ]

    actual_mac = [0] * 8
    for i in range(8):
        actual_mac[i] = mangled_mac[i] ^ MANGLE_SEQUENCE[i]

    mac_num = int.from_bytes(bytes(actual_mac), 'little')
    assert mac_num == 0xe65fd65d75c33ab9


main()

